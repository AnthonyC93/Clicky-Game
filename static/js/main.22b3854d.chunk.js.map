{"version":3,"sources":["components/Navbar/index.js","components/Footer/index.js","components/PhotoGrid/index.js","components/InfoCard/index.js","App.js","serviceWorker.js","index.js"],"names":["navbar","props","react_default","a","createElement","className","href","id","topScore","footer","rel","target","photoGrid","currentShuffle","picPressed","map","current","i","key","onClick","alt","src","infoCard","currentScore","App","state","imageSources","imagesPlayed","chosenPic","_this$state","_this","newImages","Object","toConsumableArray","push","console","log","includes","setState","reShuffle","arrayToShuffle","length","j","Math","floor","random","temp","Navbar","this","InfoCard","PhotoGrid","Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22b3854d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nfunction navbar(props){\r\n\r\n    return(\r\n        <div className=\"navbar-fixed\">\r\n            <nav>\r\n                <div className=\"nav-wrapper container\">\r\n                    <a href=\"#\" className=\"brand-logo\">Clicky Game!</a>\r\n                    <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                        <li>\r\n                            <h5>Top Score: {props.topScore}</h5>\r\n                        </li>                        \r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default navbar;","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction footer(){\r\n    return(\r\n        <footer className=\"page-footer\">\r\n            <div className=\"footer-copyright\">\r\n                <div className=\"container\">\r\n                    Â© 2018 Is When I Made This\r\n                    <a className=\"grey-text text-lighten-4 right\" rel=\"noopener noreferrer\" target=\"_blank\"href=\"https://github.com/AnthonyC93/Clicky-Game\">Github Repo</a>\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default footer;","import React from 'react';\r\nimport './style.css';\r\n\r\n//for i=3 make a row and in each one{ \r\n    //for each of the 4 pictures{make a column and card panel with an image}\r\n// }\r\n\r\nfunction photoGrid(props){\r\n    let {currentShuffle, picPressed} = props;\r\n    return(\r\n        <div className='row'>\r\n            <div className='container'>\r\n                <div className='col s12'>\r\n                    <div className='row'>\r\n                            {\r\n                                currentShuffle.map((current,i)=>{\r\n                                    return(\r\n                                        <div key={i} className='col s12 m6 l3 center-align'>\r\n                                            <div className='hoverable card-panel'onClick={()=>picPressed(current)} ><img alt=\"Game Option\"className=\"responsive-img\" src={props.currentShuffle[i]}/></div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default photoGrid;","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction infoCard(props){\r\n    return(\r\n        <div className=\"row center-align\">\r\n            <div className=\"col s12\">\r\n                <div className='container'>\r\n                    <div className=\"card-panel white infoCard\">\r\n                        <div className='container'>\r\n                            <h3 className=' card-title'>Clicky Game!</h3>\r\n                            <span className=\"flow-text \">Click on an image to earn points, but don't click on any more than once!</span>\r\n                            <h3>Score: {props.currentScore}</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default infoCard;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport PhotoGrid from './components/PhotoGrid';\nimport InfoCard from './components/InfoCard';\nimport './App.css';\n\nclass App extends Component {\n\n  state={\n    currentScore:0,\n    topScore:0,\n    imageSources:[\n      \"https://picsum.photos/160/160/?image=872\",\n      \"https://picsum.photos/160/160/?image=871\",\n      \"https://picsum.photos/160/160/?image=870\",\n      \"https://picsum.photos/160/160/?image=869\",\n      \"https://picsum.photos/160/160/?image=868\",\n      \"https://picsum.photos/160/160/?image=867\",\n      \"https://picsum.photos/160/160/?image=866\",\n      \"https://picsum.photos/160/160/?image=865\",\n      \"https://picsum.photos/160/160/?image=864\",\n      \"https://picsum.photos/160/160/?image=863\",\n      \"https://picsum.photos/160/160/?image=862\",\n      \"https://picsum.photos/160/160/?image=861\",\n    ],\n    imagesPlayed:[]\n  }\n\n  picPressed = (chosenPic) =>{\n    \n    let {currentScore,topScore,imagesPlayed} = this.state;  \n    let newImages = [...this.state.imagesPlayed];\n    newImages.push(chosenPic);\n    console.log(newImages)\n\n    if(imagesPlayed.includes(chosenPic)){\n      //when they lose, I need to set their current score to 0 and clear the images playe\n      newImages=[];\n      this.setState({currentScore:0, imagesPlayed:newImages});\n    }else{\n      //when they're correct, I add one to current score and I update top score if \n      currentScore+=1;\n      this.setState({\n        currentScore:currentScore,\n      });\n      if (currentScore>topScore) this.setState({topScore:currentScore});\n    }\n    \n    this.setState({imagesPlayed:newImages});\n    this.reShuffle(this.state.imageSources);\n  }\n\n  reShuffle = (arrayToShuffle) =>{\n\n    // Durstenfeld shuffle, a computer-optimized version of Fisher-Yates\n    for (var i = arrayToShuffle.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = arrayToShuffle[i];\n      arrayToShuffle[i] = arrayToShuffle[j];\n      arrayToShuffle[j] = temp;\n    }\n    \n    //------------- ES6 Equivalent -------------\n    // for (let i = array.length - 1; i > 0; i--) {\n    //   const j = Math.floor(Math.random() * (i + 1));\n    //   [array[i], array[j]] = [array[j], array[i]];\n    // }\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar topScore={this.state.topScore} />\n        <InfoCard currentScore={this.state.currentScore}/>\n        <PhotoGrid currentShuffle={this.state.imageSources} picPressed={this.picPressed}/>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}